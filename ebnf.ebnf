
type ::= identifier | '(' identifier* ')' '=>' type;

arrayExpression ::= '[' (expression (',' expression)*)? ']';

primaryExpression ::= identifier | number | boolean | '(' expression ')' | arrayExpression  | arrowFunction | callExpression;

arguments ::= '(' (expression (',' expression)*)? ')';
callExpression ::= primaryExpression ('(' arguments? ')')*;



(* I will want to change identifier to expression *)
sliceExpression ::= identifier '[' expression ':' expression (':' expression)? ']'; 

updateExpression ::= identifier ('++' | '--');

(* Higher precedence *)
multiplicativeOperator ::= '*' | '/' | '**' | '%';
multiplicativeExpression ::= primaryExpression (multiplicativeOperator primaryExpression)*;

additiveOperator ::= '+' | '-';
additiveExpression ::= multiplicativeExpression (additiveOperator multiplicativeExpression)*;

relationalOperator ::= '<' | '>' | '<=' | '>=';
relationalExpression ::= additiveExpression (relationalOperator additiveExpression)*;

equalityOperator ::= '==' | '!=';
equalityExpression ::= relationalExpression (equalityOperator relationalExpression)*;

logicAndOperator ::= '&&';
logicAndExpression ::= equalityExpression (logicAndOperator equalityExpression)*;

logicOrOperator ::= '||';
logicOrExpression ::= logicAndExpression (logicOrOperator logicAndExpression)*;

(* Lower precedence *)
expression ::= logicOrExpression;

expressionStatement ::= expression;
blockStatement ::= '{' statement* '}';
deferStatement ::= 'defer' callExpression;



classDeclaration ::= 'class' identifier '{' (functionDeclaration)* '}';


variableAssignmentStatement ::= identifier ('=' | ':=' ) expression;
returnStatement ::= 'return' [expression];
incrementDecrementStatement ::= expression ('++' | '--');
whileStatement ::= 'while' [expression]  blockStatement;
ifStatement ::= 'if' expression blockStatement ('else if' expression blockStatement)* ('else' blockStatement)?;
rangeStatement ::= 'for' identifierExpression ':=' 'range' expression blockStatement;

(* second identifier is type *)
param ::= identifier type;
functionDeclaration ::= 'func' identifier '(' (param (',' param)*)? ')' identifier blockStatement;
methodDeclaration ::=  identifier '(' (identifier (',' identifier)*)? ')' blockStatement;

arrowFunction ::= '(' (param (',' param)*)? ')' ':' identifier '=>' expression;


statement ::= expressionStatement | variableDeclarationStatement 
    | blockStatement | whileStatement | ifStatement 
    | functionDeclaration | deferStatement | returnStatement;

program ::= statement*;