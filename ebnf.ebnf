
arrayExpression ::= '[' (expression (',' expression)*)? ']';

primaryExpression ::= identifier | number | boolean | '(' expression ')' | arrayExpression;

callExpression ::= identifier '(' (identifier (',' identifier)*)? ')';

(* I will want to change identifier to expression *)
sliceExpression ::= identifier '[' expression ':' expression (':' expression)? ']'; 

(* Higher precedence *)
multiplicativeOperator ::= '*' | '/' | '**' | '%';
multiplicativeExpression ::= primaryExpression (multiplicativeOperator primaryExpression)*;

additiveOperator ::= '+' | '-';
additiveExpression ::= multiplicativeExpression (additiveOperator multiplicativeExpression)*;

relationalOperator ::= '<' | '>' | '<=' | '>=';
relationalExpression ::= additiveExpression (relationalOperator additiveExpression)*;

equalityOperator ::= '==' | '!=';
equalityExpression ::= relationalExpression (equalityOperator relationalExpression)*;

logicAndOperator ::= '&&';
logicAndExpression ::= equalityExpression (logicAndOperator equalityExpression)*;

logicOrOperator ::= '||';
logicOrExpression ::= logicAndExpression (logicOrOperator logicAndExpression)*;

(* Lower precedence *)
expression ::= logicOrExpression;

expressionStatement ::= expression;
blockStatement ::= '{' statement* '}';
deferStatement ::= 'defer' callExpression;

(* I will get rid of this one*)
variableDeclarationStatement ::= 'let' identifier '=' expression; 
variableAssignmentStatement ::= identifier ('=' | ':=' ) expression;

returnStatement ::= 'return' [expression];

incrementDecrementStatement ::= expression ('++' | '--');
whileStatement ::= 'while' [expression]  blockStatement;
ifStatement ::= 'if' expression blockStatement ('else if' expression blockStatement)* ('else' blockStatement)?;
rangeStatement ::= 'for' identifierExpression ':=' 'range' expression blockStatement;

functionDeclaration ::= 'func' identifier '(' (identifier (',' identifier)*)? ')' blockStatement;

statement ::= expressionStatement | variableDeclarationStatement 
    | blockStatement | whileStatement | ifStatement 
    | functionDeclaration | deferStatement | returnStatement;

program ::= statement*;