
arrayExpression ::= '[' (expression (',' expression)*)? ']';

primaryExpression ::= identifier | number | boolean | '(' expression ')' | arrayExpression;

callExpression ::= identifier '(' (identifier (',' identifier)*)? ')';

(* I will want to change identifier to expression *)
sliceExpression ::= identifier '[' expression ':' expression (':' expression)? ']'; 

multiplicativeOperator ::= '*' | '/' | '**' | '%';
multiplicativeExpression ::= primaryExpression (multiplicativeOperator primaryExpression)*;

additiveOperator ::= '+' | '-';
additiveExpression ::= multiplicativeExpression (additiveOperator multiplicativeExpression)*;

expression ::= primaryExpression | additiveExpression;

expressionStatement ::= expression;
blockStatement ::= '{' statement* '}';
deferStatement ::= 'defer' callExpression;

(* I will get rid of this one*)
variableDeclarationStatement ::= 'let' identifier '=' expression; 
variableAssignmentStatement ::= identifier ('=' | ':=' ) expression;

whileStatement ::= 'while' [expression]  blockStatement;
ifStatement ::= 'if' expression blockStatement ('else if' expression blockStatement)* ('else' blockStatement)?;
rangeStatement ::= 'for' variableAssignmentStatement 'range' expression blockStatement;

functionDeclaration ::= 'func' identifier '(' (identifier (',' identifier)*)? ')' blockStatement;

statement ::= expressionStatement | variableDeclarationStatement | blockStatement | whileStatement | ifStatement | functionDeclaration | deferStatement;

program ::= statement*;