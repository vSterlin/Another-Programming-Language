
type ::= identifier | '(' identifier* ')' '=>' type;
typeAlias ::= 'type' identifier type;

arrayExpression ::= '[' (expression (',' expression)*)? ']';

primaryExpression ::= identifier 
                    | number 
                    | boolean 
                    | '(' expression ')' 
                    | arrayExpression  
                    | arrowFunction;

arguments ::= '(' (expression (',' expression)*)? ')';
callExpression ::= primaryExpression ('(' arguments? ')')*;

(* I will want to change identifier to expression *)
sliceExpression ::= identifier '[' expression ':' expression (':' expression)? ']'; 

unaryExpression ::=   updateExpression 
                    | '!'unaryExpression 
                    | callExpression 
                    | sliceExpression;

updateExpression ::= primaryExpression [('++' | '--')];

(* Higher precedence *)
multiplicativeOperator ::= '*' | '/' | '**' | '%';
multiplicativeExpression ::= unaryExpression (multiplicativeOperator unaryExpression)*;

additiveOperator ::= '+' | '-';
additiveExpression ::= multiplicativeExpression (additiveOperator multiplicativeExpression)*;

relationalOperator ::= '<' | '>' | '<=' | '>=';
relationalExpression ::= additiveExpression (relationalOperator additiveExpression)*;

equalityOperator ::= '==' | '!=';
equalityExpression ::= relationalExpression (equalityOperator relationalExpression)*;

logicAndOperator ::= '&&';
logicAndExpression ::= equalityExpression (logicAndOperator equalityExpression)*;

logicOrOperator ::= '||';
logicOrExpression ::= logicAndExpression (logicOrOperator logicAndExpression)*;
(* Lower precedence *)
expression ::= logicOrExpression;

expressionStatement ::= expression;

blockStatement ::= '{' statement* '}';
deferStatement ::= 'defer' callExpression;

variableAssignmentStatement ::= identifier ('=' | ':=' ) expression;
returnStatement ::= 'return' [expression];
whileStatement ::= 'while' [expression]  blockStatement;
ifStatement ::= 'if' expression blockStatement ('else if' expression blockStatement)* ('else' blockStatement)?;
rangeStatement ::= 'for' identifierExpression ':=' 'range' expression blockStatement;

param ::= identifier type;
functionDeclaration ::= 'func' identifier '(' (param (',' param)*)? ')' identifier blockStatement;
arrowFunction ::= '(' (param (',' param)*)? ')' type '=>' expression | blockStatement ;

statement ::= expressionStatement 
            | variableDeclarationStatement 
            | blockStatement 
            | whileStatement 
            | ifStatement 
            | functionDeclaration 
            | deferStatement 
            | returnStatement;


program ::= statement*;