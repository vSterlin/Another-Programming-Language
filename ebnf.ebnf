
arrayExpression ::= '[' (expression (',' expression)*)? ']';

primaryExpression ::= identifier | number | boolean | '(' expression ')' | arrayExpression

(* TODO accept more params *)
callExpression ::= identifier '(' expression ')' ;

multiplicativeOperator ::= '*' | '/' | '**' | '%';
multiplicativeExpression ::= primaryExpression (multiplicativeOperator primaryExpression)*;

additiveOperator ::= '+' | '-';
additiveExpression ::= multiplicativeExpression (additiveOperator multiplicativeExpression)*;

expression ::= primaryExpression | additiveExpression;

expressionStatement ::= expression;
blockStatement ::= '{' statement* '}';
variableDeclarationStatement ::= 'let' identifier '=' expression;
whileStatement ::= 'while' [expression]  blockStatement;
ifStatement ::= 'if' expression blockStatement ('else if' expression blockStatement)* ('else' blockStatement)?;

statement ::= expressionStatement | variableDeclarationStatement | blockStatement | whileStatement;

program ::= statement*;